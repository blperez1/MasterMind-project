    console.log(`To begin, you can either start the game with 6 colors or select 'hard mode' first and then start the game for 12 colors.
        The goal is to determine the sequence that is generated by using process of elimination.
        Input your four guesses into the provided text box and assert them against the hidden code
        You will be given one of 3 responses after each assert, 0 red, 0 white => no colors are in the sequence
        'x' red response means that 'x' many colors are correct and in the correct spot in the sequence (no particular order tho)
        'x' white response means that 'x' many colors are correct but in the wrong spot in the sequence (no particular order as well)
        use the provided notes box as needed to keep track of your options you have eliminated, you have 10 guesses to solve the code!"`);

    const baseColorKeys = ["blue", "yellow", "orange", "green", "pink", "brown"];
    const hardColorKey = [...baseColorKeys,"olive", "purple", "grey", "lime", "cyan", "tan"];
    
    let sequence = [];
    var answerSequence = [];
    let hardModeButton = document.getElementById("increaseDiff");
    let hard = false;
    let hardModeText = document.getElementById("isHardMode");
    let won = false;
    const newGameButton = document.getElementById("newGame");
    const done = document.getElementById("done");
    const gameWon = document.getElementById("winner");
    
    let count = 0;
    //answer key
    let answer1 = document.getElementById("key1");
    let answer2 = document.getElementById("key2");
    let answer3 = document.getElementById("key3");
    let answer4 = document.getElementById("key4");
    // checkboxes
    const checkboxButtons = document.querySelectorAll('.checkBox');
    //assert buttons
    let assert = document.getElementById("submit");

    //response
    let begin = document.getElementById("start");

    let restart = document.getElementById("link");
    let newText = document.getElementById("textCycle1");
    let gameText = document.getElementById("textCycle2");
    let restartCount = 0;

    const reloadGame = function(_restartCount){
        if(_restartCount % 2 === 0){
            newText.style.color = "#ff2e00";
            gameText.style.color = "#fffaff";
        } else {
            newText.style.color = "#fffaff";
            gameText.style.color = "#ff2e00";
        }
        textRestart();
    }

    function textRestart(){
        hard = false;
        sequence = [];
        hardModeButton.disabled = false;
        newGameButton.disabled = false;
        gameWon.innerText = "";
        hardModeText.innerText = "";
        answer1.innerHTML = "--";
        answer2.innerHTML = "--";
        answer3.innerHTML = "--";
        answer4.innerHTML = "--";
        begin.innerText = "";
        hardModeButton.style.color = "#fffafb";
        hardModeButton.style.background = "#4d473d";
        newGameButton.style.color = "#fffafb";
        newGameButton.style.background = "#4d473d";
    }

    function buildSequence(colors) {
        const cells = [...document.querySelector('#colorSequence').children]
        cells.map((cell, i) => {if (colors[i]) return cell.classList.replace("bg-grey", `bg-${colors[i]}`)})
    }

    function displayResults(rowCount, sequenceArr) {
        document.querySelectorAll(".color-sequence")[rowCount].innerHTML = renderSequence(sequenceArr);
        document.querySelectorAll(".results")[rowCount].innerHTML = renderResult(sequenceArr);
    }

    function renderSequence([one,two,three,four]) {
        return `<span class="cell bg-${one}"></span><span class="cell bg-${two}"></span><span class="cell bg-${three}"></span><span class="cell bg-${four}"></span>`
    }

    function reds(playerSequence, keySequence){
        return playerSequence.reduce( (rCRS, val, i) => (val === keySequence[i]) ? rCRS += 1 : rCRS, 0)
    }

    function getReds(playerSequence, keySequence){
        return playerSequence.map( (color, i) => (color === keySequence[i]))
    }

    function whites(playerSequence, keySequence){
        let rCWS = 0;
        const [,secondIsRed,thirdIsRed,FourthIsRed] = getReds(playerSequence, keySequence)
        const [,second,third,fourth] = playerSequence
        if(keySequence.includes(second) && !secondIsRed) rCWS++;
        if(keySequence.includes(third) && !thirdIsRed) rCWS++;
        if(keySequence.includes(fourth) && !FourthIsRed) rCWS++;

        return rCWS;
    }

    function renderResult(attemptSequence) {
        let result = "";
        let redCount = reds(attemptSequence, answerSequence);
        let whiteCount = whites(attemptSequence, answerSequence);

        if(redCount === 4){
            result = `<span class="result-cell bg-red white">4</span><span class="result-cell bg-white black">0</span>`
            won = true;
        } else {
        result = `<span class="result-cell bg-red white">${redCount}</span><span class="result-cell bg-white black">${whiteCount}</span>`
        }
        return result
    }

    function resetSequenceAttempt() {
        const cells = [...document.querySelector("#colorSequence").children];
        cells.forEach(cell => cell.classList.value = "cell bg-grey")
    }

    function generateGameSequence(gameType = false){
        let colorKeys = (gameType) ? hardColorKeys : baseColorKeys               
        for(let i = 0; i < 4; i++){
            let key = Math.floor(Math.random() * colorKeys.length - 1) + 1;
            answerSequence.push(colorKeys[key]);
        }
    }

    function assertSequence(attempts){  
        if(won){
            gameWon.innerText = "Winner!";
        } else {
            displayResults(attempts, sequence);
        }
    }

    hardModeButton.addEventListener("click", function () {
        hard = true;
        hardModeButton.style.color = "#14bdeb";
        hardModeButton.style.background = "black";
        hardModeText.innerText = "Enabled";
        hardModeButton.disabled = true;
    });

    restart.addEventListener("click", function(){
        count = 0;
        reloadGame(restartCount);
        restartCount++;
    });

    checkboxButtons.forEach(btn => btn.addEventListener("click", function(){
        if(sequence.length < 4){
            sequence.push(this.dataset.color)
            buildSequence(sequence)
        }
    }))

    newGameButton.addEventListener("click", function () {
        newGameButton.style.color = "#14bdeb";
        newGameButton.style.background = "#000000";
        newGameButton.disabled = true;
        generateGameSequence(hard);
        
        begin.innerText = "Sequence Generated";
        done.addEventListener("click", function () {
            answer1.innerHTML = answerSequence[0];
            answer2.innerHTML = answerSequence[1];
            answer3.innerHTML = answerSequence[2];
            answer4.innerHTML = answerSequence[3];
        });
    });

    assert.addEventListener("click", function(){
        assertSequence(count);
        count++;
        resetSequenceAttempt();
    });